// [[Rcpp::depends(RcppArmadillo)]]
#include <RcppArmadillo.h>

#include <pomo_rate_matrix.cpp>
#include <my_sample.cpp>


using namespace arma;
using namespace Rcpp;

/*
Simulates the trajectory of alleles over time
prob_vector_initial is the initial vector os probabilties for each pomo state
 
This is a "noisy" version of the pure Moran simulator.
The noise is introduced intends to model the effects of pool seq
coverage is the amount of reads that are generated by each time point and replicate
 
 Example:
 Ne         <- 300
 times      <- c(0,1,2,3,4,5)
 sigma      <- 0.6
 
 prob_vector_initial     <- rep(0,Ne+1)
 prob_vector_initial[round(0.5*Ne)] <- 1
 
 number_replicates <- 10
 coverage          <- 1000
 
 allele_trajectory <- allele_trajectory_simulator(Ne,sigma,times,prob_vector_initial,number_replicates,coverage)
 */

// [[Rcpp::export]]
List allele_trajectory_simulator(double N,double sigma,vec times,vec prob_vector_initial, int number_replicates, int coverage) {
  
  // calculates the pomo matrix
  mat pomo_matrix = pomo_rate_matrix(N,sigma);
  
  //usefull quantities
  int number_pomo_states = pomo_matrix.n_cols;
  int number_time_points = times.n_elem;
  
  vec null_vector(number_pomo_states);
  null_vector.zeros();
  
  vec pomo_states = linspace(0,N,N+1);
  
  //matrix of total coverage
  mat total_coverage_matrix(number_replicates,number_time_points);
  total_coverage_matrix.ones();
  total_coverage_matrix = total_coverage_matrix*coverage;
  
  // matrix of partial coverage (number of reads allele A is observed)
  mat coverage_matrix(number_replicates,number_time_points);
  coverage_matrix.zeros();
  
  for (int i=0; i<number_replicates; i++){
    
    // simulates initial state
    vec prob_vector0     = prob_vector_initial;
    double state0        = my_sample(pomo_states,prob_vector0); 
    
    // saves the coverage
    coverage_matrix(i,0) = rbinom(1,coverage,state0/N)(0);
    
    for (int j=1; j<number_time_points; j++ ) {
      
      // simulates intermediary and final states
      vec prob_vector1     = expmat(pomo_matrix*(times(j)-times(j-1))).t()*prob_vector0;
      double state1        = my_sample(pomo_states,prob_vector1);
      
      // saves the coverage
      coverage_matrix(i,j) = rbinom(1,coverage,state1/N)(0);
      
      // update vector
      prob_vector0 = null_vector;
      prob_vector0(state1) = 1;
      
    }

  }
  
  return List::create(Named("allele_coverage")= coverage_matrix,
                      Named("total_coverage") = total_coverage_matrix);

}

